version: 2.1

# the default pipeline parameters, which will be updated according to
# the results of the path-filtering orb
parameters:
  integration-tests-_changed:
    type: boolean
    default: false
  authentication-svc_changed:
    type: boolean
    default: false
  authorization-svc_changed:
    type: boolean
    default: false
  client-lib_changed:
    type: boolean
    default: false
  public-types-lib_changed:
    type: boolean
    default: false

##
# Yaml anchors
#
##

anchor_configure_git: &anchor_configure_git
  name: Configure git
  command: |
    git config user.email ${GIT_CI_EMAIL}
    git config user.name ${GIT_CI_USER}

anchor_npm_auth: &anchor_npm_auth
  name: Update NPM registry auth token
  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &workingDirVar /home/circleci/project
    resource_class: medium
    docker:
      - image: cimg/node:18.13
  default-machine:
    machine:
      image: ubuntu-2204:2022.07.1
      docker_layer_caching: true

jobs:
  publish-npm-lib:
    executor: default-docker
    parameters:
      package_name:
        type: string
        default: "DEFAULT_PACKAGE_NAME"
    steps:
      - checkout
      - attach_workspace:
          at: *workingDirVar
      - restore_cache:
          keys:
            - build-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          <<: *anchor_configure_git
      - run:
          <<: *anchor_npm_auth
      - run: npm config set registry https://registry.npmjs.org/
      - run:
          name: Publish package
          command: |
            echo "not implemented yet - should publish package: << parameters.package_name >>"

  common-pre-docker-build:
    executor: default-docker
    parameters:
      package_name:
        type: string
        default: "DEFAULT_PACKAGE_NAME"
    steps:
      - checkout
      - run: node -e "const p=require('./packages/<< parameters.package_name >>/package.json'); console.log(p.name.replace('@', ''))" > /tmp/<< parameters.package_name >>_docker_image_name
      - run: node -e "const p=require('./packages/<< parameters.package_name >>/package.json'); console.log(p.version)" > /tmp/<< parameters.package_name >>_docker_image_version
      - persist_to_workspace:
          root: /tmp
          paths:
            - << parameters.package_name >>_docker_image_name
            - << parameters.package_name >>_docker_image_version

  common-docker-build:
    executor: default-machine
    #    executor: default-docker
    parameters:
      package_name:
        type: string
        default: "DEFAULT_SERVICE_NAME"
    environment:
      DOCKER_BUILDKIT: 1
      #BUILDX_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Setup Env vars with docker image name, tag and git short hash
          command: |
            echo 'export MY_DOCKER_IMAGE_NAME="$(cat /tmp/<< parameters.package_name >>_docker_image_name)"' >> "$BASH_ENV"
            echo 'export MY_DOCKER_IMAGE_VERSION="$(cat /tmp/<< parameters.package_name >>_docker_image_version)"' >> "$BASH_ENV"
            echo 'export SHORT_GIT_HASH="$(echo $CIRCLE_SHA1 | cut -c -7)"' >> "$BASH_ENV"
      - run:
          name: Test Env vars with docker image name, tag and git short hash
          command: |
            echo $MY_DOCKER_IMAGE_NAME
            echo $MY_DOCKER_IMAGE_VERSION
            echo $SHORT_GIT_HASH
      - run:
          name: Docker version
          command: docker --version
      - run:
          name: Login to Docker Hub
          command: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Docker build image
          command: docker build --cache-from=$MY_DOCKER_IMAGE_NAME:alpha-latest -f packages/<< parameters.package_name >>/Dockerfile -t $MY_DOCKER_IMAGE_NAME:$MY_DOCKER_IMAGE_VERSION .
      - run:
          name: Docker tag image with git hash
          command: docker tag $MY_DOCKER_IMAGE_NAME:$MY_DOCKER_IMAGE_VERSION $MY_DOCKER_IMAGE_NAME:$SHORT_GIT_HASH
      - run:
          name: Docker tag image with alpha-latest
          command: docker tag $MY_DOCKER_IMAGE_NAME:$MY_DOCKER_IMAGE_VERSION $MY_DOCKER_IMAGE_NAME:alpha-latest
      - run:
          name: Docker push image
          command: docker push $MY_DOCKER_IMAGE_NAME:$MY_DOCKER_IMAGE_VERSION
      - run:
          name: Docker push image git hash tag
          command: docker push $MY_DOCKER_IMAGE_NAME:$SHORT_GIT_HASH
      - run:
          name: Docker push image alpha-latest tag
          command: docker push $MY_DOCKER_IMAGE_NAME:alpha-latest

workflows:
  docker-build-and-push:
    when: << pipeline.parameters.docker_build_and_push >>
    jobs:
      - common-pre-docker-build:
          context: org-global
          package_name: << pipeline.parameters.docker_build_and_push >>
      - common-docker-build:
          context: org-global
          service_name: << pipeline.parameters.docker_build_and_push >>
          requires:
            - common-pre-docker-build
  publish-npm-lib:
    when: << pipeline.parameters.publish_npm_lib >>
    jobs:
      - publish-npm-lib:
          context: org-global
          package_name: << pipeline.parameters.publish-npm-lib >>
